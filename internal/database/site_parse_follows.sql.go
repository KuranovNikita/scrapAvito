// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: site_parse_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSiteParseFollows = `-- name: CreateSiteParseFollows :one
INSERT INTO siteParseFollows (id, created_at, updated_at, user_id, site_parse_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, site_parse_id
`

type CreateSiteParseFollowsParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	UserID      uuid.UUID
	SiteParseID uuid.UUID
}

func (q *Queries) CreateSiteParseFollows(ctx context.Context, arg CreateSiteParseFollowsParams) (Siteparsefollow, error) {
	row := q.db.QueryRowContext(ctx, createSiteParseFollows,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.SiteParseID,
	)
	var i Siteparsefollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.SiteParseID,
	)
	return i, err
}

const getBotDataBySiteParseID = `-- name: GetBotDataBySiteParseID :many
SELECT b.bot_token, b.chat_id
FROM siteParseFollows spf
JOIN botsTelegram b ON spf.user_id = b.user_id
WHERE spf.site_parse_id = $1
`

type GetBotDataBySiteParseIDRow struct {
	BotToken string
	ChatID   string
}

func (q *Queries) GetBotDataBySiteParseID(ctx context.Context, siteParseID uuid.UUID) ([]GetBotDataBySiteParseIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getBotDataBySiteParseID, siteParseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBotDataBySiteParseIDRow
	for rows.Next() {
		var i GetBotDataBySiteParseIDRow
		if err := rows.Scan(&i.BotToken, &i.ChatID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSiteParseFollows = `-- name: GetSiteParseFollows :many
SELECT user_id, site_parse_id FROM siteParseFollows
`

type GetSiteParseFollowsRow struct {
	UserID      uuid.UUID
	SiteParseID uuid.UUID
}

func (q *Queries) GetSiteParseFollows(ctx context.Context) ([]GetSiteParseFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSiteParseFollows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSiteParseFollowsRow
	for rows.Next() {
		var i GetSiteParseFollowsRow
		if err := rows.Scan(&i.UserID, &i.SiteParseID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
